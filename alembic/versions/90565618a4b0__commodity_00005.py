"""_commodity_00005

Revision ID: 90565618a4b0
Revises: 1eb5d9b6eea3
Create Date: 2022-12-21 17:38:32.412866

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy.orm import sessionmaker
from api.config import settings
Session = sessionmaker()


# revision identifiers, used by Alembic.
revision = '90565618a4b0'
down_revision = '1eb5d9b6eea3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('commodity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name_local', sa.String(), nullable=False),
    sa.Column('name_bit', sa.String(), nullable=False),
    sa.Column('name_common', sa.String(), nullable=False),
    sa.Column('inventory', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('sap', sa.String(), nullable=False),
    sa.Column('unit_of_measurement', sa.String(), nullable=False),
    sa.Column('per_unit', sa.Float(), nullable=False),
    sa.Column('per_pallet', sa.Integer(), nullable=False),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('True'), nullable=False),
    sa.Column('id_supplier', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('time_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_supplier'], ['suppliers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name_local'),
    )
    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute("""
    CREATE TRIGGER update_timestamp
    BEFORE UPDATE
    ON commodity
    FOR EACH ROW
    EXECUTE PROCEDURE update_timestamp();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('commodity')
    # ### end Alembic commands ###
