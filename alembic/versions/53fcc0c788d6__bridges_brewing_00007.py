"""_bridges_brewing_00007

Revision ID: 53fcc0c788d6
Revises: 13adeaceee5f
Create Date: 2022-12-26 00:58:51.055244

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy.orm import sessionmaker
from api.config import settings
Session = sessionmaker()

# revision identifiers, used by Alembic.
revision = '53fcc0c788d6'
down_revision = '13adeaceee5f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bridge_addition',
    sa.Column('id_brand_brewing', sa.Integer(), nullable=False),
    sa.Column('id_commodity', sa.Integer(), nullable=False),
    sa.Column('per_brew', sa.Numeric(precision=9, scale=2), nullable=False),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('time_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_brand_brewing'], ['brand_brewing.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_commodity'], ['commodity.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_brand_brewing', 'id_commodity')
    )
    op.create_table('bridge_dry_hop',
    sa.Column('id_brand_brewing', sa.Integer(), nullable=False),
    sa.Column('id_commodity', sa.Integer(), nullable=False),
    sa.Column('per_brew', sa.Numeric(precision=9, scale=2), nullable=False),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('time_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_brand_brewing'], ['brand_brewing.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_commodity'], ['commodity.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_brand_brewing', 'id_commodity')
    )
    op.create_table('bridge_kettle_hop',
    sa.Column('id_brand_brewing', sa.Integer(), nullable=False),
    sa.Column('id_commodity', sa.Integer(), nullable=False),
    sa.Column('per_brew', sa.Numeric(precision=9, scale=2), nullable=False),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('time_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_brand_brewing'], ['brand_brewing.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_commodity'], ['commodity.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_brand_brewing', 'id_commodity')
    )
    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute("""
    CREATE TRIGGER update_timestamp
    BEFORE UPDATE
    ON bridge_addition
    FOR EACH ROW
    EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
    CREATE TRIGGER update_timestamp
    BEFORE UPDATE
    ON bridge_dry_hop
    FOR EACH ROW
    EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
    CREATE TRIGGER update_timestamp
    BEFORE UPDATE
    ON bridge_kettle_hop
    FOR EACH ROW
    EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
    CREATE OR REPLACE FUNCTION delete_empty_rows_bridge_addition() RETURNS TRIGGER
    LANGUAGE plpgsql
    AS
    $$
    BEGIN
    DELETE FROM bridge_addition WHERE per_brew = 0;
    RETURN NULL;
    END;
    $$;
    """)
    session.execute("""
    CREATE TRIGGER trigger_delete_empty_rows_bridge_addition
    AFTER INSERT ON bridge_addition
    EXECUTE PROCEDURE delete_empty_rows_bridge_addition();
    """)
    session.execute("""
    CREATE OR REPLACE FUNCTION delete_empty_rows_bridge_dry_hop() RETURNS TRIGGER
    LANGUAGE plpgsql
    AS
    $$
    BEGIN
    DELETE FROM bridge_dry_hop WHERE per_brew = 0;
    RETURN NULL;
    END;
    $$;
    """)
    session.execute("""
    CREATE TRIGGER trigger_delete_empty_rows_bridge_dry_hop
    AFTER INSERT ON bridge_dry_hop
    EXECUTE PROCEDURE delete_empty_rows_bridge_dry_hop();
    """)
    session.execute("""
    CREATE OR REPLACE FUNCTION delete_empty_rows_bridge_kettle_hop() RETURNS TRIGGER
    LANGUAGE plpgsql
    AS
    $$
    BEGIN
    DELETE FROM bridge_kettle_hop WHERE per_brew = 0;
    RETURN NULL;
    END;
    $$;
    """)
    session.execute("""
    CREATE TRIGGER trigger_delete_empty_rows_bridge_kettle_hop
    AFTER INSERT ON bridge_kettle_hop
    EXECUTE PROCEDURE delete_empty_rows_bridge_kettle_hop();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bridge_kettle_hop')
    op.drop_table('bridge_dry_hop')
    op.drop_table('bridge_addition')

    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute("DROP FUNCTION delete_empty_rows_bridge_kettle_hop();")
    session.execute("DROP FUNCTION delete_empty_rows_bridge_dry_hop();")
    session.execute("DROP FUNCTION delete_empty_rows_bridge_addition();")
    # ### end Alembic commands ###
